# -*- coding: utf-8 -*-
"""Datacamp-Python-Programmer-Python Data Science Toolbox-part-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SpARHvoJqDF-xtm7dYhb0uh-qb7v-KTt

# Lamda Function
- not recommended but comes handy sometimes such as using map(func,seq) ; seq = list

- How would you write a lambda function add_bangs that adds three exclamation points '!!!' to the end of a string a?
- How would you call add_bangs with the argument 'hello'?
"""

add_bangs = (lambda a: a + '!!!')

add_bangs('hello')

def echo_word(word1, echo):
    """Concatenate echo copies of word1."""
    words = word1 * echo
    return words

echo_word('hey',5)

# Define echo_word as a lambda function: echo_word
echo_word = (lambda word1,echo: echo*word1)

# Call echo_word: result
result = echo_word('hey',5)

# Print result
print(result)

"""- map() applies a function over an object, such as a list"""

nums = [2, 4, 6, 8, 10]

result = map(lambda a: a ** 2, nums)

print(list(result))

"""- In the map() call, pass a lambda function that concatenates the string '!!!' to a string item; also pass the list of strings, spells. Assign the resulting map object to shout_spells.
- Convert shout_spells to a list and print out the list.
"""

# Create a list of strings: spells
spells = ["protego", "accio", "expecto patronum", "legilimens"]

# Use map() to apply a lambda function over spells: shout_spells
shout_spells = map(lambda item : item+'!!!', spells)

# Convert shout_spells to a list: shout_spells_list
shout_spells_list=list(shout_spells)

# Print the result
print(shout_spells_list)

"""- In the filter() call, pass a lambda function and the list of strings, fellowship. The lambda function should check if the number of characters in a string member is greater than 6; use the len() function to do this. Assign the resulting filter object to result.
- Convert result to a list and print out the list.

- The function filter() offers a way to filter out elements from a list that don't satisfy certain criteria.
"""

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']

# Use filter() to apply a lambda function over fellowship: result
result = filter(lambda member: len(member)>6, fellowship)

# Convert result to a list: result_list
result_list=list(result)

# Print result_list
print(result_list)

"""# Error handling

len('There is a beast in every man and it stirs when you put a sword in his hand.')

len(['robb', 'sansa', 'arya', 'eddard', 'jon'])

len(525600)

len(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey'))

Which of the function calls raises an error and what type of error is raised?
"""

len('There is a beast in every man and it stirs when you put a sword in his hand.')

len(['robb', 'sansa', 'arya', 'eddard', 'jon'])

len(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey'))

#uncomment the line to see the type of error
"""len(525600)"""

"""# Error handling with try-except
- type of error link: https://docs.python.org/3/library/exceptions.html

- Initialize the variables echo_word and shout_words to empty strings.
- Add the keywords try and except in the appropriate locations for the exception handling block.
- Use the * operator to concatenate echo copies of word1. Assign the result to echo_word.
- Concatenate the string '!!!' to echo_word. Assign the result to shout_words.
"""

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Initialize empty strings: echo_word, shout_words
    echo_word=''
    shout_words=''
    

    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = word1*echo

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word+'!!!'
    except:
        # Print error message
        print("word1 must be a string and echo must be an integer.")

    # Return shout_words
    return shout_words

# Call shout_echo
shout_echo("particle", echo="accelerator")

"""# Error handling by raising an error

- Complete the if statement by checking if the value of echo is less than 0.
- In the body of the if statement, add a raise statement that raises a ValueError with message 'echo must be greater than or equal to 0' when the value supplied by the user to echo is less than 0.
"""

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Raise an error with raise
    if echo<0:
        raise ValueError('echo must be greater than or equal to 0')

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo
shout_echo("particle", echo=5)