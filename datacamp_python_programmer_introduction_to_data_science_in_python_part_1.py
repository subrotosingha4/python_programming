# -*- coding: utf-8 -*-
"""Datacamp-Python-Programmer-Introduction to Data Science in Python-part-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jE2xeyoCipTv2xq_vuDqtCGEQbeW21wP

# Assigning Variable
"""

#Fill in Bayes' age (4.0)
# 4.0 indicates an assignment of floating value
bayes_age = 4.0

# Display the variable bayes_age
print(bayes_age)

"""# Creating strings"""

# Bayes' favorite toy
favorite_toy = "Mr. Squeaky"
# Bayes' owner
owner = 'DataCamp'

# Display variables
print(favorite_toy)
print(owner)

"""# Correcting string errors

-  use same type of quotation either double or single
"""

# One or more of the following lines contains an error
# Correct it so that it runs without producing syntax errors
birthday = "2017-07-14"
case_id = 'DATACAMP!123-456?'

"""# Load a DataFrame"""

# Import pandas
#import pandas as pd

# Load the 'ransom.csv' into a DataFrame
#r = pd.read_csv('ransom.csv')

# Display DataFrame
#print(r)

#print five rows
#df.head()
#print(df.head())
#inspect dataframe
#df.info()
#print(df.info())

"""# Selecting Columns"""

# Select the column item from credit_records
# Use brackets and string notation
#items = credit_records['item']

# Display the results
#print(items)

# Select the column item from credit_records
# Use dot notation
#items = credit_records.item

# Display the results
#print(items)

"""# Use info() to inspect mpr
print(mpr.info())

# The following code contains one or more errors
# Correct the mistakes in the code so that it runs without errors

# Select column "Dog Name" from mpr
name = mpr["Dog Name"]

# Select column "Missing?" from mpr
is_missing = mpr["Missing?"]

# Display the columns
print(name)
print(is_missing)

# Logical testing

- == tests that two values are equal.
- != tests that two values are not equal.
- '>' and < test that greater than or less than, respectively.
- '>=' and <= test greater than or equal to or less than or equal to, respectively.

# Is height_inches greater than 70 inches?
print(height_inches > 70)
# Is plate1 equal to "FRQ123"?
print(plate1 == "FRQ123")
# Is fur_color not equal to "brown"?
print(fur_color != "brown")

# Select the dogs where Age is greater than 2
greater_than_2 = mpr[mpr.Age > 2]
print(greater_than_2)

# Select the dogs whose Status is equal to Still Missing
still_missing = mpr[mpr.Status == "Still Missing"]
print(still_missing)

# Select all dogs whose Dog Breed is not equal to Poodle
not_poodle = mpr[mpr['Dog Breed'] != 'Poodle']
print(not_poodle)

# Select purchases from 'Pet Paradise'
purchase = credit_records[credit_records.location == 'Pet Paradise']

# Display
print(purchase)

In Chapter 1, we found a list of people whose cars matched the description of the one that kidnapped Bayes:

Fred Frequentist
Ronald Aylmer Fisher
Gertrude Cox
Kirstine Smith
We'd like to narrow this list down, so we obtained credit card records for each suspect. We'd like to know if any of them recently purchased dog treats to use in the kidnapping. If they did, they would have visited 'Pet Paradise'.

The credit records have been loaded into a DataFrame called credit_records.

credit_records[credit_records.location=='Pet Paradise']

# Matplotlib
"""

# From matplotlib, import pyplot under the alias plt
#from matplotlib import pyplot as plt

"""# From matplotlib, import pyplot under the alias plt
from matplotlib import pyplot as plt

# Plot Officer Deshaun's hours_worked vs. day_of_week
plt.plot(deshaun.day_of_week, deshaun.hours_worked)

# Display Deshaun's plot
plt.show()

# Plot Officer Deshaun's hours_worked vs. day_of_week
plt.plot(deshaun.day_of_week, deshaun.hours_worked)

# Plot Officer Aditya's hours_worked vs. day_of_week
plt.plot(aditya.day_of_week, aditya.hours_worked)

# Plot Officer Mengfei's hours_worked vs. day_of_week
plt.plot(mengfei.day_of_week, mengfei.hours_worked)

# Display all three line plots
plt.show()

# Add a label to Deshaun's plot
plt.plot(deshaun.day_of_week, deshaun.hours_worked, label='deshaun')

# Officer Aditya
plt.plot(aditya.day_of_week, aditya.hours_worked)

# Officer Mengfei
plt.plot(mengfei.day_of_week, mengfei.hours_worked)

# Display plot
plt.show()

# Officer Deshaun
plt.plot(deshaun.day_of_week, deshaun.hours_worked, label='Deshaun')

# Add a label to Aditya's plot
plt.plot(aditya.day_of_week, aditya.hours_worked, label='Aditya')

# Add a label to Mengfei's plot
plt.plot(mengfei.day_of_week, mengfei.hours_worked, label='Mengfei')

# Add a command to make the legend display
plt.legend()

# Display plot
plt.show()

# Create plot
plt.plot(six_months.month, six_months.hours_worked)

# Add annotation "Missing June data" at (2.5, 80)
plt.text(2.5, 80, "Missing June data")

# Display graph
plt.show()

# Change the color of Phoenix to `"DarkCyan"`
plt.plot(data["Year"], data["Phoenix Police Dept"], label="Phoenix", color='DarkCyan')

# Make the Los Angeles line dotted
plt.plot(data["Year"], data["Los Angeles Police Dept"], label="Los Angeles", linestyle=':')

# Add square markers to Philedelphia
plt.plot(data["Year"], data["Philadelphia Police Dept"], label="Philadelphia", marker='s')

# Add a legend
plt.legend()

# Display the plot
plt.show()

# Change the style to fivethirtyeight
plt.style.use('fivethirtyeight')

# Plot lines
plt.plot(data["Year"], data["Phoenix Police Dept"], label="Phoenix")
plt.plot(data["Year"], data["Los Angeles Police Dept"], label="Los Angeles")
plt.plot(data["Year"], data["Philadelphia Police Dept"], label="Philadelphia")

# Add a legend
plt.legend()

# Display the plot
plt.show()

- 'fivethirtyeight' - Based on the color scheme of the popular website

- 'grayscale' - Great for when you don't have a color printer!

- 'seaborn' - Based on another Python visualization library

- 'classic' - The default color scheme for Matplotlib
- View all styles by typing print(plt.style.available) in the console

# x should be ransom.letter and y should be ransom.frequency
plt.plot(ransom.letter, ransom.frequency,
         # Label should be "Ransom"
         label="Ransom",
         # Plot the ransom letter as a dotted gray line
         linestyle=':', color='gray')

# Display the plot
plt.show()

# Plot each line
plt.plot(ransom.letter, ransom.frequency,
         label='Ransom', linestyle=':', color='gray')

# X-values should be suspect1.letter
# Y-values should be suspect1.frequency
# Label should be "Fred Frequentist"
plt.plot(suspect1.letter, suspect1.frequency, label='Fred Frequentist')

# Display the plot
plt.show()

# Plot each line
plt.plot(ransom.letter, ransom.frequency,
         label='Ransom', linestyle=':', color='gray')
plt.plot(suspect1.letter, suspect1.frequency,
         label='Fred Frequentist')

# X-values should be suspect2.letter
# Y-values should be suspect2.frequency
# Label should be "Gertrude Cox"
plt.plot(suspect2.letter,suspect2.frequency,label='Gertrude Cox')

# Display plot
plt.show()

# Plot each line
plt.plot(ransom.letter, ransom.frequency,
         label='Ransom', linestyle=':', color='gray')
plt.plot(suspect1.letter, suspect1.frequency, label='Fred Frequentist')
plt.plot(suspect2.letter, suspect2.frequency, label='Gertrude Cox')

# Add x- and y-labels
plt.xlabel("Letter")
plt.ylabel("Frequency")

# Add a legend
plt.legend()

# Display plot
plt.show()

# Scatter Plot and Line Plot

- when data is unordered we use scatter plot
- when data is ordered we use line plot
- plt.scatter(x,y,color=,marker=,alpha=[0,1])
- when there is a overlapping scatter plot with more than one dataset then to visualize the data we can use alpha parameter
- small value makes transparent and greater values make non-transparent

# Explore the data
print(cellphone.head())

# Create a scatter plot of the data from the DataFrame cellphone
plt.scatter(cellphone.x, cellphone.y)

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

# Change the marker color to red
plt.scatter(cellphone.x, cellphone.y,
           color='red')

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

# Change the marker shape to square
plt.scatter(cellphone.x, cellphone.y,
           color='red',
           marker='s',
           alpha=0.1) #square marker

# Add labels
plt.ylabel('Latitude')
plt.xlabel('Longitude')

# Display the plot
plt.show()

# bar chart

- Horizontal bar charts: **plt.barh(x,y)**
- Adding error bars: avg not always tell the story thus add a error bar such as SD/Standard error using **plt.bar(x,y,yerr="error")**
- Stacked bar charts

# Display the DataFrame hours using print
print(hours)

# Create a bar plot from the DataFrame hours
plt.bar(hours.officer, hours.avg_hours_worked,
        # Add error bars
        yerr=hours.std_hours_worked)

# Display the plot
plt.show()

- Create a bar plot of the time each officer spends on desk_work.
- Label that bar plot "Desk Work".

# Plot the number of hours spent on desk work
plt.bar(hours.officer,hours.desk_work,label="Desk Works")

# Display the plot
plt.show()

- Create a bar plot for field_work whose bottom is the height of desk_work.
- Label the field_work bars as "Field Work" and add a legend.

# histograms
- create bins of certain range
- plt.hist(df.)
- plt.hist(df.,range=(xmin,xmax)) #to zoom in particular range
- plt.hist(df.,density=True) #if two distribution is not comparable then normalize the data so that they are in between 1; set density=True does that
- plt.hist(df.,bins=nbins) #to change the number of bins, by default 10 bins

# Summarization

- how to import modules such as numpy, matplotlib
- alias modules such as numpy as np, matplotlib as plt
- how to use pandas to load dataset
- various datatypes: float, string, dataframe, integer
- functions: how to write function, how to pass arguments, call a function
- visualize data using lineplot, barchart, scatter plot, histogram
"""

